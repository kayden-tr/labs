def getExtraEnvs() {
  def extraEnvs = env.EXTRA_ENVS ? env.EXTRA_ENVS.split(' ') : []
  def envList = []

  extraEnvs.each { extraEnv ->
    def envKV = extraEnv.split('=')
    envList.add("${envKV[0]}=${envKV[1]}")
  }

  return envList
}

properties([
  parameters([
    string(description: 'Required, the date of backup, YYYY-MM-DD', name: 'BACKUP_DATE'),
    booleanParam(description: 'Optional, skip sync backups to multi dc', name: 'SKIP_SYNC_BACKUP', defaultValue: false),
    string(
      description: 'Optional, fill EXTRA_ENVS to run, example: COMPRESS_CASSANDRA=true COMPRESS_ELASTICSEARCH=false',
      name: 'EXTRA_ENVS'
    )
  ])
])

pipeline {
  agent { label 'backupandlog-it-backup' }

  environment {
    BACKUP_DIR = '/mnt/backup'
    UPLOAD_DIR = '/mnt/upload'
  }

  options {
    disableConcurrentBuilds()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    timestamps()
    ansiColor('xterm')
  }

  post {
    always {
      script {
        emailext(
          attachLog: false,
          body: '$DEFAULT_CONTENT',
          mimeType: 'text/html',
          subject: '$DEFAULT_SUBJECT',
          from: 'backup@atalink.com',
          to: '$DEFAULT_RECIPIENTS'
        )
      }
    }
  }

  stages {
    stage('compress backup') {
      steps {
        script {
          def envList = getExtraEnvs()

          withEnv(envList) {
            sh 'printenv'

            if (!env.BACKUP_DATE) {
              currentBuild.result = 'ABORTED'
              error('env.BACKUP_DATE is not set')
            }

            sh "bash $HOME/.backup/bin/prepare_sync_backup.sh"
          }
        }
      }
    }

    stage('trigger sync backup to multidc') {
      when {
        expression {
          env.SKIP_SYNC_BACKUP != 'true'
        }
      }
      steps {
        script {
          def envList = getExtraEnvs()

          withEnv(envList) {
            build(
              job: 'sync-to-multidc',
              parameters: [
                string(name: 'BACKUP_DATE', value: env.BACKUP_DATE)
              ],
              wait: false
            )
          }
        }
      }
    }
  }
}